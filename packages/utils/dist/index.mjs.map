{"version":3,"sources":["../src/date.ts","../src/filterFormatting.ts","../src/formatting.ts"],"sourcesContent":["import { format, parseISO } from 'date-fns';\n\n/**\n * Formats a date string or Date object into a more readable format.\n * @param date The date to format.\n * @param formatString The desired output format.\n * @returns A formatted date string.\n */\nexport const formatDate = (\n  date: string | Date,\n  formatString: string = 'MMMM d, yyyy'\n): string => {\n  if (!date) return '';\n  try {\n    const dateObj = typeof date === 'string' ? parseISO(date) : date;\n    if (isNaN(dateObj.getTime())) {\n      return '';\n    }\n    return format(dateObj, formatString);\n  } catch (error) {\n    console.error('Error formatting date:', date, error);\n    return '';\n  }\n};\n\n/**\n * Formats a date string or Date object into a short date and time format.\n * e.g., \"Jan 1, 5:00 PM\"\n * @param date The date to format.\n * @returns A formatted date-time string.\n */\nexport const formatDateTimeShort = (date: string | Date): string => {\n  if (!date) return '';\n  try {\n    const dateObj = typeof date === 'string' ? parseISO(date) : date;\n    // Check if the date is valid\n    if (isNaN(dateObj.getTime())) {\n      return '';\n    }\n    return format(dateObj, 'MMM d, p');\n  } catch (error) {\n    console.error('Error formatting date:', date, error);\n    return '';\n  }\n};\n","import { VehicleFilters } from '@directdrive/core-types';\n\nexport const formatFilterValue = (key: string, value: any, allFilters: Partial<VehicleFilters>): string => {\n  const formatPrice = (price: number) => new Intl.NumberFormat('en-ZA', { style: 'currency', currency: 'ZAR', maximumFractionDigits: 0 }).format(price);\n  const formatKm = (km: number) => `${new Intl.NumberFormat('en-ZA').format(km)} km`;\n\n  if (Array.isArray(value)) return value.join(', ');\n\n  if (key === 'minPrice' && allFilters.maxPrice) return `${formatPrice(value)} - ${formatPrice(allFilters.maxPrice)}`;\n  if (key === 'maxPrice' && !allFilters.minPrice) return `< ${formatPrice(value)}`;\n  if (key === 'minPrice') return `> ${formatPrice(value)}`;\n\n  if (key === 'minMileage' && allFilters.maxMileage) return `${formatKm(value)} - ${formatKm(allFilters.maxMileage)}`;\n  if (key === 'maxMileage' && !allFilters.minMileage) return `< ${formatKm(value)}`;\n  if (key === 'minMileage') return `> ${formatKm(value)}`;\n\n  if (key === 'minYear' && allFilters.maxYear) return `${value} - ${allFilters.maxYear}`;\n  if (key === 'maxYear' && !allFilters.minYear) return `< ${value}`;\n  if (key === 'minYear') return `> ${value}`;\n\n  return String(value);\n};\n\nexport const formatFilterLabel = (key: string): string => {\n  return key\n    // Insert a space before all caps\n    .replace(/([A-Z])/g, ' $1')\n    // Remove min/max prefixes\n    .replace(/\\b(min|max)\\b/g, '')\n    // Uppercase the first character of each word\n    .replace(/\\b\\w/g, l => l.toUpperCase())\n    // Remove leading/trailing spaces\n    .trim();\n};\n\nexport const getActiveFilters = (filters: Partial<VehicleFilters>): Array<[keyof VehicleFilters, any]> => {\n  const activeFilters: Array<[keyof VehicleFilters, any]> = [];\n  const filterKeys: Array<keyof VehicleFilters> = Object.keys(filters) as Array<keyof VehicleFilters>;\n\n  filterKeys.forEach(key => {\n    const value = filters[key];\n    if (\n      key !== 'pageNumber' &&\n      key !== 'pageSize' &&\n      key !== 'searchTerm' &&\n      value !== undefined &&\n      value !== '' &&\n      value !== 0 &&\n      (!Array.isArray(value) || value.length > 0)\n    ) {\n      activeFilters.push([key, value]);\n    }\n  });\n\n  return activeFilters;\n};\n","/**\n * Formats a number into a South African Rand (ZAR) currency string.\n * @param price The number to format.\n * @returns A string like \"R 150,000\".\n */\nexport const formatPrice = (price: number): string => {\n  return new Intl.NumberFormat('en-ZA', {\n    style: 'currency',\n    currency: 'ZAR',\n    maximumFractionDigits: 0,\n  }).format(price);\n};\n\n/**\n * Formats a number into a mileage string with \"km\".\n * @param mileage The number to format.\n * @returns A string like \"123,456 km\".\n */\nexport const formatMileage = (mileage: number): string => {\n  return `${new Intl.NumberFormat('en-ZA', { useGrouping: true }).format(mileage)} km`;\n};\n"],"mappings":"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","names":["formatPrice"]}